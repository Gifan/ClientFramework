{
  "ver": "1.0.25",
  "uuid": "ee453eeb-3c86-42e1-bccc-92d85122e884",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n  varying vec4 v_dark;\n#endif\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\n#if USE_HSV\n  uniform vec4 hsv;\n  vec3 rgb2hsv(vec3 c){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n  }\n  vec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  }\n#endif\nvoid main () {\n  vec4 texColor = vec4(1.0);\n  vec4 finalColor;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  #endif\n  #if USE_TINT\n    finalColor.a = v_color.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_color.rgb;\n  #else\n    finalColor = texColor * v_color;\n  #endif\n  #if USE_HSV\n      vec3 fragRGB = finalColor.rgb;\n        vec3 fragHSV = rgb2hsv(fragRGB).xyz;\n        float r = step(60.9/360.0, fragHSV.x)-step(179.9/360.0, fragHSV.x);\n        fragHSV.x += r*(hsv.x / 360.0);\n        fragHSV.yz += r*hsv.yz;\n        fragHSV.x = mod(fragHSV.x, 1.0);\n        fragHSV.yz = clamp(fragHSV.yz, 0.0, 1.0);\n        fragRGB = hsv2rgb(fragHSV);\n        finalColor.xyz = fragRGB.xyz;\n  #endif\n  gl_FragColor = finalColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TINT\n  in vec4 a_color0;\n  out vec4 v_dark;\n#endif\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_TINT\n  in vec4 v_dark;\n#endif\n#if USE_HSV\n  uniform HsvBlock{\n    vec4 hsv;\n  };\n  vec3 rgb2hsv(vec3 c){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n  }\n  vec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  }\n#endif\nvoid main () {\n  vec4 texColor = vec4(1.0);\n  vec4 finalColor;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  #endif\n  #if USE_TINT\n    finalColor.a = v_color.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_color.rgb;\n  #else\n    finalColor = texColor * v_color;\n  #endif\n  #if USE_HSV\n      vec3 fragRGB = finalColor.rgb;\n        vec3 fragHSV = rgb2hsv(fragRGB).xyz;\n        float r = step(60.9/360.0, fragHSV.x)-step(179.9/360.0, fragHSV.x);\n        fragHSV.x += r*(hsv.x / 360.0);\n        fragHSV.yz += r*hsv.yz;\n        fragHSV.x = mod(fragHSV.x, 1.0);\n        fragHSV.yz = clamp(fragHSV.yz, 0.0, 1.0);\n        fragRGB = hsv2rgb(fragHSV);\n        finalColor.xyz = fragRGB.xyz;\n  #endif\n  gl_FragColor = finalColor;\n}"
      }
    }
  ],
  "subMetas": {}
}